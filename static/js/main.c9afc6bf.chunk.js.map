{"version":3,"sources":["ui/BroomCard.tsx","App.tsx","serviceWorker.ts","store/slices/counter.ts","store/slices/flcker.ts","store/rootReducer.ts","store/saga.ts","store/store.ts","index.tsx"],"names":["Meta","Card","BroomCardBare","style","width","cover","alt","src","actions","SettingOutlined","key","EditOutlined","EllipsisOutlined","avatar","title","description","BroomFallbackCard","componentStack","error","toString","BroomCard","FallbackComponent","flickerURL","URL","App","dispatch","useDispatch","items","useSelector","flicker","React","useEffect","type","payload","console","log","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","incrementReducer","increment","produce","draft","count","decrementReducer","decrement","counterSlice","createSlice","name","initialState","reducers","flickerSlice","counterReducer","reducer","flickerReducer","flickerInc","rootReducer","combineReducers","counter","helloSaga","incrementAsync","watchIncrementAsync","fetchPublicPhotosFeed","watchFetchPublicPhotosFeed","rootSaga","saga","delay","ms","Promise","res","setTimeout","call","put","takeEvery","apiFetch","url","fetch","mode","data","err","message","action","all","sagaMiddleware","createSagaMiddleware","store","configureStore","middleware","getDefaultMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c9afc6bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ErrorBoundary, { FallbackProps } from 'react-error-boundary'\r\n\r\nimport { EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport { Card, Avatar } from 'antd';\r\nconst { Meta } = Card;\r\n\r\ninterface IBroomCardProps {\r\n\r\n}\r\n\r\nconst BroomCardBare: React.FC<IBroomCardProps> = () => {\r\n  return (\r\n    <Card\r\n      style={ { width: 300 } }\r\n      cover={\r\n        <img\r\n          alt=\"example\"\r\n          src=\"https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png\"\r\n        />\r\n      }\r\n      actions={ [\r\n        <SettingOutlined key=\"setting\" />,\r\n        <EditOutlined key=\"edit\" />,\r\n        <EllipsisOutlined key=\"ellipsis\" />,\r\n      ] }\r\n    >\r\n      <Meta\r\n        avatar={ <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" /> }\r\n        title=\"Card title\"\r\n        description=\"This is the description\"\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst BroomFallbackCard: React.FC<FallbackProps> = ({ componentStack, error }) => (\r\n  <div>\r\n    <p><strong>Oops! An error occured!</strong></p>\r\n    <p>Here’s what we know…</p>\r\n    <p><strong>Error:</strong> { error?.toString() ?? '' }</p>\r\n    <p><strong>Stacktrace:</strong> { componentStack }</p>\r\n  </div>\r\n);\r\n\r\nexport const BroomCard: React.FC = () => {\r\n  return <ErrorBoundary FallbackComponent={ BroomFallbackCard }>\r\n    <BroomCardBare />\r\n  </ErrorBoundary>\r\n}","import React from 'react'\nimport './App.css'\n\nimport { AppDispatch } from './store/store'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { RootState } from './store/rootReducer'\nimport { BroomCard } from './ui/BroomCard'\n\nconst flickerURL = new URL('https://api.flickr.com/services/feeds/photos_public.gne?format=json')\n\nexport const App: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch()\n  const { items } = useSelector(({ flicker }: RootState) => flicker)\n\n  React.useEffect(() => {\n    dispatch({ type: 'saga/fetchPublicPhotosFeed', payload: flickerURL.toString() })\n    // eslint-disable-next-line\n  }, [])\n\n  React.useEffect(() => {\n    console.log({ items })\n  }, [items])\n\n  return (\n    <article className=\"App\">\n      <BroomCard />\n    </article>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createSlice } from \"@reduxjs/toolkit\"\nimport { produce, Draft } from \"immer\"\n\ninterface ICounterState {\n  readonly count: number\n}\n\nconst initialState = {\n  count: 0\n}\n\n/**\n * {type: 'counter/increment'}\n * Increments the counter by 1.\n */\nconst incrementReducer = {\n  increment: produce((draft: Draft<ICounterState>) => {\n    draft.count++\n  })\n}\n\n/**\n * {type: 'counter/decrement'}\n * Decrements the counter by 1.\n */\nconst decrementReducer = {\n  decrement: produce((draft: Draft<ICounterState>) => {\n    draft.count--\n  })\n}\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    ...incrementReducer,\n    ...decrementReducer\n  }\n})\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { produce, Draft } from \"immer\"\n\ninterface IFlickerState {\n  readonly items: Array<any>\n}\n\nconst initialState: IFlickerState = {\n  items: []\n}\n\n/**\n * {type: 'counter/increment'}\n * Increments the counter by 1.\n */\nconst incrementReducer = {\n  increment: produce((draft: Draft<IFlickerState>, { payload: { items } }: PayloadAction<IFlickerState>) => {\n    console.log({ items })\n    draft.items = items\n  })\n}\n\n/**\n * {type: 'counter/decrement'}\n * Decrements the counter by 1.\n */\nconst decrementReducer = {\n  decrement: produce((draft: Draft<IFlickerState>, { payload: { items } }: PayloadAction<IFlickerState>) => {\n    draft.items = items\n  })\n}\n\nexport const flickerSlice = createSlice({\n  name: 'flicker',\n  initialState,\n  reducers: {\n    ...incrementReducer,\n    ...decrementReducer\n  },\n})\n","import { counterSlice } from \"./slices/counter\"\nimport { flickerSlice } from \"./slices/flcker\";\nimport { combineReducers } from \"@reduxjs/toolkit\"\n\n\nconst {\n  reducer: counterReducer,\n  actions: { increment, decrement }\n} = counterSlice\n\nconst {\n  reducer: flickerReducer,\n  actions: { increment: flickerInc, decrement: flickerDec },\n} = flickerSlice\n\nexport const rootReducer = combineReducers({\n  counter: counterReducer,\n  flicker: flickerReducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport {\n  increment, decrement,\n  flickerInc, flickerDec\n}","import { put, takeEvery, all, call } from \"redux-saga/effects\"\nimport { increment, flickerInc } from \"./rootReducer\";\n\nfunction* helloSaga () {\n  console.log({ saga: 'hello Saga!' })\n  yield 1\n}\n\nexport const delay = (ms: number) => new Promise(res => setTimeout(res, ms))\n\nexport function* incrementAsync () {\n  yield call(delay, 1000)\n  yield put(increment())\n}\n\nfunction* watchIncrementAsync () {\n  // @ts-ignore\n  yield takeEvery('saga/incrementAsync', incrementAsync)\n}\n\n// const jsonFlickrFeed = (feed: string): JSON => {\n//   const unFeed = feed.replace(/$jsonFlickrFeed\\((.*)\\)^/, (match, p1, p2) => {\n//     console.log({match, p1, p2})\n//     return match\n//   })\n//   console.log({ unFeed })\n//   return JSON.parse('{}')\n// }\n\nfunction jsonFlickrApi (rsp: any) {\n  console.log({ rsp })\n  return rsp\n}\n\nconst apiFetch = (url: string) => {\n  return fetch(url, {\n    mode: 'same-origin'\n  })\n    .then(res => res)\n    .then(res => { console.log({ res: res.type }); return res })\n    .then(data => ({ items: data }))\n    .catch(err => ({ err: err.message }))\n}\n\nexport function* fetchPublicPhotosFeed (action: { type: string, payload: string }) {\n  try {\n    const data = yield call(apiFetch, action.payload)\n    yield put(flickerInc(data))\n  } catch (fetchError) {\n\n  }\n}\n\nfunction* watchFetchPublicPhotosFeed () {\n  // @ts-ignore\n  yield takeEvery('saga/fetchPublicPhotosFeed', fetchPublicPhotosFeed)\n}\n\nexport function* rootSaga () {\n  yield all([\n    helloSaga(),\n    watchIncrementAsync(),\n    watchFetchPublicPhotosFeed()\n  ])\n}\n\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\"\nimport { rootReducer } from \"./rootReducer\"\nimport createSagaMiddleware from \"redux-saga\"\nimport { rootSaga } from \"./saga\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [...getDefaultMiddleware(), sagaMiddleware]\n})\n\nsagaMiddleware.run(rootSaga)\n\nexport type AppDispatch = typeof store.dispatch","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'antd/dist/antd.css';\nimport './index.css'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { Provider } from \"react-redux\"\nimport { store } from \"./store/store\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}